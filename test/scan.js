/*▄────────────────────▄
  █                    █
  █  Загрузка модулей  █
  █                    █
  ▀────────────────────▀*/
require('core'); // Ядро
const { Scanner } = require('..'); // Работа с RAW-пакетами на уровне L2

/*┌──────────────────┐
  │ Создаем приемник │
  └──────────────────┘*/
const scanner = new Scanner({
    iface:    'eth0', // Имя сетевого интерфейса
    delay:       100, // Задержка между пакетами   = 0.1 сек
    delayError: 3000, // Задержка после ошибки     =   3 сек
    timeout:    5000, // Время на получение пакета =   5 сек
});

/*┌────────────────────────────────────────┐
  │ Добавляем обработчик получения пакетов │
  └────────────────────────────────────────┘*/
scanner.on('data', (packetBuffer, packet, isBroadcast) => {
// Фильтруем только broadcast-пакеты (MAC-адрес назначения FF:FF:FF:FF:FF:FF)
    if (!isBroadcast(packet)) return;
    
// Выводим в консоль
    _=`Пакет получен: ${packetBuffer.length}`
    _=packetBuffer.toString('hex')
    _='---'
});

/*┌─────────────────────────────┐
  │ Добавляем обработчик ошибок │
  └─────────────────────────────┘*/
scanner.on('error', (err) => {
    _='Ошибка!'
    _=err
});

/*┌──────────────────────────────┐
  │ Добавляем обработчик запуска │
  └──────────────────────────────┘*/
scanner.on('start', () => {
    _='Запуск!'
});

/*┌────────────────────────────────┐
  │ Добавляем обработчик остановки │
  └────────────────────────────────┘*/
scanner.on('stop', () => {
    _='Остановка!'
});

/*┌──────────────────────────────────────────┐
  │ Обработчик аварийного завершения воркера │
  └──────────────────────────────────────────┘*/
scanner.on('exit', (code) => {
    _=`Аварийное завершение воркера! Код выхода: ${code}`
});

/*┌──────────────────────────────────┐
  │ Добавляем обработчик перезапуска │
  └──────────────────────────────────┘*/
scanner.on('restart', (reason) => {
    _=`Перезапуск приемника... Причина: ${reason}`
});

/*┌───────────────────────────────┐
  │ Добавляем обработчик таймаута │
  └───────────────────────────────┘*/
scanner.on('timeout', () => {
    _='Превышено время на получение пакета!'
});
